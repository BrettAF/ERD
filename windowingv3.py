# -*- coding: utf-8 -*-
"""WindowingV3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_QFresp8v5_B8SpCsg6gvMYDmxrgYSEL

# Libraries and variables
"""

import os
import pandas as pd
import numpy as np
import copy

from pathlib import Path


# Make numpy values easier to read.
np.set_printoptions(precision=6, suppress=True)
import random as r
import scipy as sp
from scipy.stats import zscore
from scipy.fft import fft, ifft

import sklearn
from sklearn.datasets import make_classification
from sklearn.utils import shuffle

from collections import Counter
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline

from numpy import where
from numpy.random.mtrand import noncentral_chisquare

"""# Reading & Shaping Data"""

def readBinFiles(folder):
  dfs=np.empty((1,600,18)) #This array holds all the EEG datasets this program will be using
  labels=np.empty((1))
  print(folder)
  for x in os.listdir():
    if x.endswith("labels.npy"):

      # This appends all the csv files to the array
      new_labels=np.load(x)
      print(x,len(new_labels))
      dfname=x[:-10]+'l'

      print(dfname)
      # This appends all the csv files to the array
      new_data=np.memmap(dfname, dtype='float32', mode='r', shape=(len(new_labels),600,18))
      new_data=np.array(new_data)

      dfs=np.concatenate((dfs,new_data),axis=0)

      labels=np.append(labels,new_labels)

  dfs=dfs[1:]
  return dfs,labels[1:]

def normalize(dfs,labels):
  for df in range(0, dfs.shape[0]):
    dfs[df] = zscore(dfs[df])
  return dfs,labels

def removeSeizures(dfs,labels,Period_of_interest):
  #{'label':xyz,'index':xyz}
  new_labels=np.empty((1))
  index_to_delete =[]
  for i in range(0,len(labels)):

    #if the number is less than 0, it is in a seizure and is removed
    if (labels[i] <0):
      index_to_delete.append(i)
      new_labels=np.append(new_labels,3)
    #if the label is 0, it is after the last siezure, i don;t really know how to treat it
    elif (labels[i]==0):
      new_labels=np.append(new_labels,int(0))

    #if the label is greater than the poi, then it is far from the seizure and is marked with a 0
    elif(labels[i] >Period_of_interest):
      new_labels=np.append(new_labels,int(0))

    #If none of the others were true, it must be in the period of interest, and it gets marked with a 1
    else:
      new_labels=np.append(new_labels,int(1))

  new_labels=new_labels[1:]
  dfs=np.delete(dfs,index_to_delete,axis=0)
  new_labels=np.delete(new_labels,index_to_delete)
  return dfs,new_labels

def smote(dfs,labels):

# summarize class distribution
  counter = Counter(labels)
  print("before:\t",counter)
  dfs=dfs.reshape(-1,600*18)
  # define pipeline
  over = SMOTE(sampling_strategy=.99)
  under = RandomUnderSampler(sampling_strategy=.99)
  steps = [('o', over), ('u', under)]
  pipeline = Pipeline(steps=steps)


  # transform the dataset
  dfs, labels = pipeline.fit_resample(dfs, labels)
  # summarize the new class distribution

  counter = Counter(labels)
  print("after:\t",counter)
  dfs=dfs.reshape(-1,600,18)
  return dfs,labels

def shuffle(dfs,labels):
  dfs,labels=sklearn.utils.shuffle(dfs,labels)
  return dfs,labels

def save(dfs,labels,folder):



  os.chdir('/content/drive/MyDrive/ERD/files')
  data_labels=[]
  data_files=[]
  for i in range(0,dfs.shape[0]):
    new_file=np.memmap(folder+"data"+str(i), dtype='float32', mode='w+', shape=(600,18))
    new_file[:]=dfs[i][:][:]
    new_file.flush()
    data_files=np.append(data_files,folder+"data"+str(i))
    data_labels=np.append(data_labels,labels[i])
  os.chdir('..')
  np.save(folder+'data_labels', data_labels)
  np.save(folder+"data_files",data_files)

"""# MAIN

"""

#This is the period before a seizure that will be examined.
period_of_interest=60*60*1

folders_for_making_model = ('chb01','chb02')#,'chb03','chb04','chb05','chb06','chb07','chb08','chb09','chb10','chb11','chb12','chb13','chb14','chb15','chb16','chb17','chb18','chb19','chb20','chb21','chb22','chb23','chb23','chb24')


for folder in folders_for_making_model:
  os.chdir('/content/drive/MyDrive/ERD')
  os.chdir(folder)

  dfs,labels=readBinFiles(folder)
  print('read\t',dfs.shape,',',len(labels),',',dfs[2][1][3])

  dfs,labels=normalize(dfs,labels)
  print('normal\t',dfs.shape,',',len(labels),',',dfs[2][1][3])

  dfs,labels=removeSeizures(dfs,labels, period_of_interest)
  print('remove\t',dfs.shape,',',len(labels),',',dfs[2][1][3])

  dfs,labels=shuffle(dfs,labels)
  print('shuffle\t',dfs.shape,',',len(labels),',',dfs[2][1][3])

  dfs,labels=smote(dfs,labels)
  print('smote\t',dfs.shape,',',len(labels),',',dfs[2][1][3])
  os.chdir('..')
  save(dfs,labels,folder)
  dfs=0

os.chdir('/content/drive/MyDrive/ERD/files')
a_file=np.memmap("chb01data1898", dtype='float32', mode='r', shape=(600,18))
a_file[456]
#a=[]
#labs=np.load('data_files.npy')
#print(labs)
#np.save('data_files')
